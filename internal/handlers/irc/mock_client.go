// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

package irc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	girc "github.com/lrstanley/girc"
	internal "github.com/ritlug/teleirc/internal"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockClientInterface) SendMessage(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", arg0)
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockClientInterfaceMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClientInterface)(nil).SendMessage), arg0)
}

// StartBot mocks base method
func (m *MockClientInterface) StartBot(arg0 chan<- error, arg1 func(string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBot", arg0, arg1)
}

// StartBot indicates an expected call of StartBot
func (mr *MockClientInterfaceMockRecorder) StartBot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBot", reflect.TypeOf((*MockClientInterface)(nil).StartBot), arg0, arg1)
}

// Logger mocks base method
func (m *MockClientInterface) Logger() internal.DebugLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(internal.DebugLogger)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockClientInterfaceMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockClientInterface)(nil).Logger))
}

// addHandlers mocks base method
func (m *MockClientInterface) addHandlers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addHandlers")
}

// addHandlers indicates an expected call of addHandlers
func (mr *MockClientInterfaceMockRecorder) addHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addHandlers", reflect.TypeOf((*MockClientInterface)(nil).addHandlers))
}

// SendToTg mocks base method
func (m *MockClientInterface) SendToTg(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendToTg", arg0)
}

// SendToTg indicates an expected call of SendToTg
func (mr *MockClientInterfaceMockRecorder) SendToTg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToTg", reflect.TypeOf((*MockClientInterface)(nil).SendToTg), arg0)
}

// IRCSettings mocks base method
func (m *MockClientInterface) IRCSettings() *internal.IRCSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IRCSettings")
	ret0, _ := ret[0].(*internal.IRCSettings)
	return ret0
}

// IRCSettings indicates an expected call of IRCSettings
func (mr *MockClientInterfaceMockRecorder) IRCSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IRCSettings", reflect.TypeOf((*MockClientInterface)(nil).IRCSettings))
}

// TgSettings mocks base method
func (m *MockClientInterface) TgSettings() *internal.TelegramSettings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TgSettings")
	ret0, _ := ret[0].(*internal.TelegramSettings)
	return ret0
}

// TgSettings indicates an expected call of TgSettings
func (mr *MockClientInterfaceMockRecorder) TgSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TgSettings", reflect.TypeOf((*MockClientInterface)(nil).TgSettings))
}

// AddHandler mocks base method
func (m *MockClientInterface) AddHandler(arg0 string, arg1 func(*girc.Client, girc.Event)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", arg0, arg1)
}

// AddHandler indicates an expected call of AddHandler
func (mr *MockClientInterfaceMockRecorder) AddHandler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockClientInterface)(nil).AddHandler), arg0, arg1)
}

// ConnectDialer mocks base method
func (m *MockClientInterface) ConnectDialer(arg0 girc.Dialer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDialer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectDialer indicates an expected call of ConnectDialer
func (mr *MockClientInterfaceMockRecorder) ConnectDialer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDialer", reflect.TypeOf((*MockClientInterface)(nil).ConnectDialer), arg0)
}

// Message mocks base method
func (m *MockClientInterface) Message(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", arg0, arg1)
}

// Message indicates an expected call of Message
func (mr *MockClientInterfaceMockRecorder) Message(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockClientInterface)(nil).Message), arg0, arg1)
}

// JoinKey mocks base method
func (m *MockClientInterface) JoinKey(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JoinKey", arg0, arg1)
}

// JoinKey indicates an expected call of JoinKey
func (mr *MockClientInterfaceMockRecorder) JoinKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinKey", reflect.TypeOf((*MockClientInterface)(nil).JoinKey), arg0, arg1)
}

// Join mocks base method
func (m *MockClientInterface) Join(arg0 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Join", varargs...)
}

// Join indicates an expected call of Join
func (mr *MockClientInterfaceMockRecorder) Join(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockClientInterface)(nil).Join), arg0...)
}
